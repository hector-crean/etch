// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { FunctionType } from "./FunctionType";
import type { ObjectProperty } from "./ObjectProperty";
import type { TypeArgument } from "./TypeArgument";

export type TypeExpression = { "typeKind": "String" } | { "typeKind": "Number" } | { "typeKind": "Boolean" } | { "typeKind": "Null" } | { "typeKind": "Undefined" } | { "typeKind": "Any" } | { "typeKind": "Void" } | { "typeKind": "Never" } | { "typeKind": "Unknown" } | { "typeKind": "Reference", "value": string } | { "typeKind": "Array", "value": TypeExpression } | { "typeKind": "Tuple", "value": Array<TypeExpression> } | { "typeKind": "Union", "value": Array<TypeExpression> } | { "typeKind": "Intersection", "value": Array<TypeExpression> } | { "typeKind": "Object", "value": Array<ObjectProperty> } | { "typeKind": "Function", "value": FunctionType } | { "typeKind": "Generic", "value": { base: string, args: Array<TypeArgument>, } };
